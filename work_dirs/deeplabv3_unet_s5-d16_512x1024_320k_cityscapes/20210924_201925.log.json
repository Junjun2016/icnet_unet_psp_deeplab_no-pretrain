{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-9.0-cudnn7.6.5\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.3\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+298142e", "seed": 0, "exp_name": "deeplabv3_unet_s5-d16_512x1024_320k_cityscapes.py", "mmseg_version": "0.16.0+298142e", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=1, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 50), ('val', 50)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=320000)\ncheckpoint_config = dict(by_epoch=False, interval=32000)\nevaluation = dict(interval=32000, metric='mIoU', pre_eval=True)\nwork_dir = './work_dirs/deeplabv3_unet_s5-d16_512x1024_320k_cityscapes'\ngpu_ids = range(0, 1)\nseed = 0\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 1, "lr": 0.01, "memory": 16722, "data_time": 5.32792, "decode.loss_seg": 2.89847, "decode.acc_seg": 17.58404, "aux.loss_seg": 1.15764, "aux.acc_seg": 5.33276, "loss": 4.05611, "time": 17.50914}
{"mode": "train", "epoch": 1, "iter": 2, "lr": 0.01, "memory": 16722, "data_time": 0.75784, "decode.loss_seg": 2.94739, "decode.acc_seg": 2.32353, "aux.loss_seg": 1.17658, "aux.acc_seg": 4.60787, "loss": 4.12398, "time": 1.29484}
{"mode": "train", "epoch": 1, "iter": 3, "lr": 0.01, "memory": 16722, "data_time": 0.44122, "decode.loss_seg": 2.71346, "decode.acc_seg": 37.04824, "aux.loss_seg": 1.08665, "aux.acc_seg": 8.90779, "loss": 3.80011, "time": 0.62258}
{"mode": "train", "epoch": 1, "iter": 4, "lr": 0.01, "memory": 16722, "data_time": 0.49933, "decode.loss_seg": 2.68967, "decode.acc_seg": 43.2168, "aux.loss_seg": 1.07976, "aux.acc_seg": 23.18382, "loss": 3.76943, "time": 0.69129}
{"mode": "train", "epoch": 1, "iter": 5, "lr": 0.01, "memory": 16722, "data_time": 0.4501, "decode.loss_seg": 2.50109, "decode.acc_seg": 25.83208, "aux.loss_seg": 0.99579, "aux.acc_seg": 26.80235, "loss": 3.49688, "time": 0.63739}
{"mode": "train", "epoch": 1, "iter": 6, "lr": 0.01, "memory": 16722, "data_time": 0.68289, "decode.loss_seg": 2.80902, "decode.acc_seg": 33.77934, "aux.loss_seg": 1.12109, "aux.acc_seg": 37.56256, "loss": 3.9301, "time": 0.95983}
{"mode": "train", "epoch": 1, "iter": 7, "lr": 0.01, "memory": 16722, "data_time": 0.35553, "decode.loss_seg": 2.84508, "decode.acc_seg": 26.90792, "aux.loss_seg": 1.13937, "aux.acc_seg": 28.84369, "loss": 3.98445, "time": 0.53846}
{"mode": "train", "epoch": 1, "iter": 8, "lr": 0.01, "memory": 16722, "data_time": 0.47247, "decode.loss_seg": 2.74853, "decode.acc_seg": 15.96241, "aux.loss_seg": 1.10094, "aux.acc_seg": 14.98041, "loss": 3.84947, "time": 0.8546}
{"mode": "train", "epoch": 1, "iter": 9, "lr": 0.01, "memory": 16722, "data_time": 1.34435, "decode.loss_seg": 2.72318, "decode.acc_seg": 25.07858, "aux.loss_seg": 1.08161, "aux.acc_seg": 25.87585, "loss": 3.80478, "time": 1.55718}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.01, "memory": 16722, "data_time": 0.45041, "decode.loss_seg": 2.80168, "decode.acc_seg": 19.87638, "aux.loss_seg": 1.11747, "aux.acc_seg": 21.55752, "loss": 3.91915, "time": 0.63156}
{"mode": "train", "epoch": 1, "iter": 11, "lr": 0.01, "memory": 16722, "data_time": 0.44731, "decode.loss_seg": 2.47759, "decode.acc_seg": 30.41029, "aux.loss_seg": 0.98804, "aux.acc_seg": 30.11217, "loss": 3.46563, "time": 0.62387}
{"mode": "train", "epoch": 1, "iter": 12, "lr": 0.01, "memory": 16722, "data_time": 0.44866, "decode.loss_seg": 1.97087, "decode.acc_seg": 0.0041, "aux.loss_seg": 0.79467, "aux.acc_seg": 0.9901, "loss": 2.76554, "time": 0.63358}
{"mode": "train", "epoch": 1, "iter": 13, "lr": 0.01, "memory": 16722, "data_time": 0.44857, "decode.loss_seg": 2.47756, "decode.acc_seg": 36.67707, "aux.loss_seg": 0.98938, "aux.acc_seg": 36.63874, "loss": 3.46693, "time": 0.63623}
{"mode": "train", "epoch": 1, "iter": 14, "lr": 0.01, "memory": 16722, "data_time": 0.62144, "decode.loss_seg": 2.66877, "decode.acc_seg": 22.29977, "aux.loss_seg": 1.06336, "aux.acc_seg": 22.9579, "loss": 3.73213, "time": 8.99338}
{"mode": "train", "epoch": 1, "iter": 15, "lr": 0.01, "memory": 16722, "data_time": 0.29991, "decode.loss_seg": 2.57394, "decode.acc_seg": 33.57763, "aux.loss_seg": 1.01982, "aux.acc_seg": 36.20548, "loss": 3.59376, "time": 0.63413}
{"mode": "train", "epoch": 1, "iter": 16, "lr": 0.01, "memory": 16722, "data_time": 1.39635, "decode.loss_seg": 2.41713, "decode.acc_seg": 37.12883, "aux.loss_seg": 0.96936, "aux.acc_seg": 36.8412, "loss": 3.38648, "time": 2.03244}
{"mode": "train", "epoch": 1, "iter": 17, "lr": 0.01, "memory": 16722, "data_time": 0.63077, "decode.loss_seg": 2.44065, "decode.acc_seg": 36.30953, "aux.loss_seg": 0.96988, "aux.acc_seg": 37.06598, "loss": 3.41054, "time": 0.83331}
{"mode": "train", "epoch": 1, "iter": 18, "lr": 0.01, "memory": 16722, "data_time": 0.45245, "decode.loss_seg": 2.50236, "decode.acc_seg": 22.0212, "aux.loss_seg": 0.99237, "aux.acc_seg": 22.75496, "loss": 3.49474, "time": 0.63628}
{"mode": "train", "epoch": 1, "iter": 19, "lr": 0.01, "memory": 16722, "data_time": 0.71354, "decode.loss_seg": 2.59161, "decode.acc_seg": 10.43215, "aux.loss_seg": 1.03333, "aux.acc_seg": 12.73918, "loss": 3.62494, "time": 0.89079}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.01, "memory": 16722, "data_time": 0.44791, "decode.loss_seg": 2.26884, "decode.acc_seg": 44.58427, "aux.loss_seg": 0.89083, "aux.acc_seg": 44.56263, "loss": 3.15967, "time": 0.62953}
{"mode": "train", "epoch": 1, "iter": 21, "lr": 0.01, "memory": 16722, "data_time": 0.44782, "decode.loss_seg": 2.3991, "decode.acc_seg": 27.10257, "aux.loss_seg": 0.96788, "aux.acc_seg": 30.14545, "loss": 3.36698, "time": 0.62716}
{"mode": "train", "epoch": 1, "iter": 22, "lr": 0.01, "memory": 16722, "data_time": 0.45331, "decode.loss_seg": 2.27337, "decode.acc_seg": 45.90139, "aux.loss_seg": 0.92106, "aux.acc_seg": 47.85366, "loss": 3.19444, "time": 0.63881}
{"mode": "train", "epoch": 1, "iter": 23, "lr": 0.01, "memory": 16722, "data_time": 0.46079, "decode.loss_seg": 2.41937, "decode.acc_seg": 18.39294, "aux.loss_seg": 0.95928, "aux.acc_seg": 21.42563, "loss": 3.37864, "time": 0.64311}
{"mode": "train", "epoch": 1, "iter": 24, "lr": 0.01, "memory": 16722, "data_time": 0.4477, "decode.loss_seg": 2.33999, "decode.acc_seg": 12.61387, "aux.loss_seg": 0.92653, "aux.acc_seg": 13.45091, "loss": 3.26651, "time": 0.62957}
{"mode": "train", "epoch": 1, "iter": 25, "lr": 0.01, "memory": 16722, "data_time": 0.4479, "decode.loss_seg": 2.24845, "decode.acc_seg": 49.59021, "aux.loss_seg": 0.86784, "aux.acc_seg": 58.80594, "loss": 3.11629, "time": 0.63289}
{"mode": "train", "epoch": 1, "iter": 26, "lr": 0.01, "memory": 16722, "data_time": 0.44506, "decode.loss_seg": 2.4521, "decode.acc_seg": 1.8714, "aux.loss_seg": 0.96335, "aux.acc_seg": 9.13897, "loss": 3.41545, "time": 0.63159}
{"mode": "train", "epoch": 1, "iter": 27, "lr": 0.01, "memory": 16722, "data_time": 0.44766, "decode.loss_seg": 1.97469, "decode.acc_seg": 11.48434, "aux.loss_seg": 0.75809, "aux.acc_seg": 15.61203, "loss": 2.73278, "time": 0.63059}
{"mode": "train", "epoch": 1, "iter": 28, "lr": 0.01, "memory": 16722, "data_time": 0.45008, "decode.loss_seg": 2.30262, "decode.acc_seg": 7.46365, "aux.loss_seg": 0.89888, "aux.acc_seg": 10.19039, "loss": 3.20151, "time": 0.64622}
{"mode": "train", "epoch": 1, "iter": 29, "lr": 0.01, "memory": 16722, "data_time": 0.44875, "decode.loss_seg": 2.16695, "decode.acc_seg": 43.32752, "aux.loss_seg": 0.80646, "aux.acc_seg": 46.36469, "loss": 2.97341, "time": 0.62952}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.01, "memory": 16722, "data_time": 0.76049, "decode.loss_seg": 2.2561, "decode.acc_seg": 5.3956, "aux.loss_seg": 0.89265, "aux.acc_seg": 5.40972, "loss": 3.14875, "time": 0.93851}
{"mode": "train", "epoch": 1, "iter": 31, "lr": 0.01, "memory": 16722, "data_time": 0.44906, "decode.loss_seg": 2.34903, "decode.acc_seg": 10.30121, "aux.loss_seg": 0.93097, "aux.acc_seg": 13.43584, "loss": 3.28, "time": 0.63278}
{"mode": "train", "epoch": 1, "iter": 32, "lr": 0.01, "memory": 16722, "data_time": 0.45176, "decode.loss_seg": 2.14414, "decode.acc_seg": 38.34372, "aux.loss_seg": 0.85258, "aux.acc_seg": 38.15403, "loss": 2.99673, "time": 0.6314}
{"mode": "train", "epoch": 1, "iter": 33, "lr": 0.01, "memory": 16722, "data_time": 0.59649, "decode.loss_seg": 2.26493, "decode.acc_seg": 25.28801, "aux.loss_seg": 0.91052, "aux.acc_seg": 21.68255, "loss": 3.17545, "time": 0.87539}
{"mode": "train", "epoch": 1, "iter": 34, "lr": 0.01, "memory": 16722, "data_time": 0.44796, "decode.loss_seg": 1.98439, "decode.acc_seg": 49.72916, "aux.loss_seg": 0.77397, "aux.acc_seg": 52.03466, "loss": 2.75836, "time": 0.62776}
{"mode": "train", "epoch": 1, "iter": 35, "lr": 0.01, "memory": 16722, "data_time": 0.49365, "decode.loss_seg": 2.06869, "decode.acc_seg": 29.28677, "aux.loss_seg": 0.76158, "aux.acc_seg": 42.08527, "loss": 2.83026, "time": 0.67278}
{"mode": "train", "epoch": 1, "iter": 36, "lr": 0.01, "memory": 16722, "data_time": 0.44656, "decode.loss_seg": 1.90659, "decode.acc_seg": 63.08661, "aux.loss_seg": 0.74747, "aux.acc_seg": 65.62453, "loss": 2.65406, "time": 0.62528}
{"mode": "train", "epoch": 1, "iter": 37, "lr": 0.01, "memory": 16722, "data_time": 1.58826, "decode.loss_seg": 2.35549, "decode.acc_seg": 5.19352, "aux.loss_seg": 0.9143, "aux.acc_seg": 11.8247, "loss": 3.26979, "time": 1.80994}
{"mode": "train", "epoch": 1, "iter": 38, "lr": 0.01, "memory": 16722, "data_time": 0.41275, "decode.loss_seg": 1.82536, "decode.acc_seg": 49.84226, "aux.loss_seg": 0.68663, "aux.acc_seg": 52.0319, "loss": 2.512, "time": 0.59302}
{"mode": "train", "epoch": 1, "iter": 39, "lr": 0.01, "memory": 16722, "data_time": 0.44675, "decode.loss_seg": 2.13927, "decode.acc_seg": 18.08491, "aux.loss_seg": 0.82189, "aux.acc_seg": 26.5398, "loss": 2.96116, "time": 0.65672}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.01, "memory": 16722, "data_time": 0.41506, "decode.loss_seg": 2.08882, "decode.acc_seg": 30.90258, "aux.loss_seg": 0.81131, "aux.acc_seg": 35.63318, "loss": 2.90013, "time": 0.59647}
{"mode": "train", "epoch": 1, "iter": 41, "lr": 0.01, "memory": 16722, "data_time": 1.31341, "decode.loss_seg": 1.91706, "decode.acc_seg": 37.33521, "aux.loss_seg": 0.70476, "aux.acc_seg": 37.54454, "loss": 2.62182, "time": 2.74979}
{"mode": "train", "epoch": 1, "iter": 42, "lr": 0.01, "memory": 16722, "data_time": 0.46167, "decode.loss_seg": 1.858, "decode.acc_seg": 33.47054, "aux.loss_seg": 0.69572, "aux.acc_seg": 39.93454, "loss": 2.55372, "time": 0.63866}
{"mode": "train", "epoch": 1, "iter": 43, "lr": 0.01, "memory": 16722, "data_time": 0.44786, "decode.loss_seg": 2.00837, "decode.acc_seg": 41.78257, "aux.loss_seg": 0.79392, "aux.acc_seg": 41.15372, "loss": 2.80229, "time": 0.62914}
{"mode": "train", "epoch": 1, "iter": 44, "lr": 0.01, "memory": 16722, "data_time": 0.45534, "decode.loss_seg": 1.94862, "decode.acc_seg": 44.8885, "aux.loss_seg": 0.73706, "aux.acc_seg": 50.72803, "loss": 2.68568, "time": 0.64168}
{"mode": "train", "epoch": 1, "iter": 45, "lr": 0.01, "memory": 16722, "data_time": 0.45144, "decode.loss_seg": 1.71138, "decode.acc_seg": 51.60122, "aux.loss_seg": 0.6631, "aux.acc_seg": 51.57976, "loss": 2.37447, "time": 0.63392}
{"mode": "train", "epoch": 1, "iter": 46, "lr": 0.01, "memory": 16722, "data_time": 0.45019, "decode.loss_seg": 2.37442, "decode.acc_seg": 10.45933, "aux.loss_seg": 0.89134, "aux.acc_seg": 33.73852, "loss": 3.26576, "time": 0.74983}
{"mode": "train", "epoch": 1, "iter": 47, "lr": 0.01, "memory": 16722, "data_time": 0.44709, "decode.loss_seg": 1.66197, "decode.acc_seg": 45.51802, "aux.loss_seg": 0.65567, "aux.acc_seg": 50.2737, "loss": 2.31763, "time": 0.62718}
{"mode": "train", "epoch": 1, "iter": 48, "lr": 0.01, "memory": 16722, "data_time": 0.45118, "decode.loss_seg": 1.7049, "decode.acc_seg": 49.14255, "aux.loss_seg": 0.62226, "aux.acc_seg": 61.3492, "loss": 2.32716, "time": 0.6913}
{"mode": "train", "epoch": 1, "iter": 49, "lr": 0.01, "memory": 16722, "data_time": 0.44752, "decode.loss_seg": 1.62132, "decode.acc_seg": 43.24198, "aux.loss_seg": 0.66716, "aux.acc_seg": 42.11016, "loss": 2.28848, "time": 0.63125}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.01, "memory": 16722, "data_time": 0.45064, "decode.loss_seg": 1.64788, "decode.acc_seg": 58.31013, "aux.loss_seg": 0.65682, "aux.acc_seg": 46.04855, "loss": 2.3047, "time": 0.68}
{"mode": "val", "epoch": 0, "iter": 51, "lr": 0.01, "memory": 16722, "data_time": 53.12297, "decode.loss_seg": 3.25664, "decode.acc_seg": 4.03271, "aux.loss_seg": 0.98579, "aux.acc_seg": 13.89389, "loss": 4.24243, "time": 57.64697}
