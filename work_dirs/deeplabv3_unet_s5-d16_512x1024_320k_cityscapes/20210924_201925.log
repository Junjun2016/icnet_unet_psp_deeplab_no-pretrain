2021-09-24 20:19:33,228 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: /mnt/cache/share/polaris/dep/cuda-9.0-cudnn7.6.5
GCC: gcc (GCC) 5.4.0
PyTorch: 1.8.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0
OpenCV: 4.5.3
MMCV: 1.3.8
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMSegmentation: 0.16.0+298142e
------------------------------------------------------------

2021-09-24 20:19:33,294 - mmseg - INFO - Distributed training: True
2021-09-24 20:19:33,814 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained=None,
    backbone=dict(
        type='UNet',
        in_channels=3,
        base_channels=64,
        num_stages=5,
        strides=(1, 1, 1, 1, 1),
        enc_num_convs=(2, 2, 2, 2, 2),
        dec_num_convs=(2, 2, 2, 2),
        downsamples=(True, True, True, True),
        enc_dilations=(1, 1, 1, 1, 1),
        dec_dilations=(1, 1, 1, 1),
        with_cp=False,
        conv_cfg=None,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        act_cfg=dict(type='ReLU'),
        upsample_cfg=dict(type='InterpConv'),
        norm_eval=False),
    decode_head=dict(
        type='ASPPHead',
        in_channels=64,
        in_index=4,
        channels=16,
        dilations=(1, 12, 24, 36),
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=128,
        in_index=3,
        channels=64,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'CityscapesDataset'
data_root = 'data/cityscapes/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/train',
        ann_dir='gtFine/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=1, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 50), ('val', 50)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=320000)
checkpoint_config = dict(by_epoch=False, interval=32000)
evaluation = dict(interval=32000, metric='mIoU', pre_eval=True)
work_dir = './work_dirs/deeplabv3_unet_s5-d16_512x1024_320k_cityscapes'
gpu_ids = range(0, 1)

2021-09-24 20:19:33,814 - mmseg - INFO - Set random seed to 0, deterministic: False
2021-09-24 20:19:36,811 - mmseg - INFO - EncoderDecoder(
  (backbone): UNet(
    (encoder): ModuleList(
      (0): Sequential(
        (0): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
      (1): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
      (2): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
      (3): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
      (4): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
    )
    (decoder): ModuleList(
      (0): UpConvBlock(
        (conv_block): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
        (upsample): InterpConv(
          (interp_upsample): Sequential(
            (0): Upsample()
            (1): ConvModule(
              (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
      (1): UpConvBlock(
        (conv_block): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
        (upsample): InterpConv(
          (interp_upsample): Sequential(
            (0): Upsample()
            (1): ConvModule(
              (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
      (2): UpConvBlock(
        (conv_block): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
        (upsample): InterpConv(
          (interp_upsample): Sequential(
            (0): Upsample()
            (1): ConvModule(
              (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
      (3): UpConvBlock(
        (conv_block): BasicConvBlock(
          (convs): Sequential(
            (0): ConvModule(
              (conv): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): ConvModule(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
        (upsample): InterpConv(
          (interp_upsample): Sequential(
            (0): Upsample()
            (1): ConvModule(
              (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
          )
        )
      )
    )
  )
  init_cfg=[{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
  (decode_head): ASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(16, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): ASPPModule(
      (0): ConvModule(
        (conv): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): ConvModule(
        (conv): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False)
        (bn): SyncBatchNorm(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (2): ConvModule(
        (conv): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), bias=False)
        (bn): SyncBatchNorm(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (3): ConvModule(
        (conv): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), bias=False)
        (bn): SyncBatchNorm(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): SyncBatchNorm(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(64, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2021-09-24 20:19:37,047 - mmseg - INFO - Loaded 2975 images
2021-09-24 20:19:37,061 - mmseg - INFO - Loaded 500 images
2021-09-24 20:19:56,234 - mmseg - INFO - Loaded 500 images
2021-09-24 20:19:56,247 - mmseg - INFO - Start running, host: hejunjun@SH-IDC1-10-198-4-63, work_dir: /mnt/lustre/hejunjun/open-mmlab/icnet/work_dirs/deeplabv3_unet_s5-d16_512x1024_320k_cityscapes
2021-09-24 20:19:56,248 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-09-24 20:19:56,248 - mmseg - INFO - workflow: [('train', 50), ('val', 50)], max: 320000 iters
2021-09-24 20:24:31,540 - mmseg - INFO - Iter [1/320000]	lr: 1.000e-02, eta: 64 days, 20:21:47, time: 17.509, data_time: 5.328, memory: 16722, decode.loss_seg: 2.8985, decode.acc_seg: 17.5840, aux.loss_seg: 1.1576, aux.acc_seg: 5.3328, loss: 4.0561
2021-09-24 20:24:33,218 - mmseg - INFO - Iter [2/320000]	lr: 1.000e-02, eta: 34 days, 19:43:38, time: 1.295, data_time: 0.758, memory: 16722, decode.loss_seg: 2.9474, decode.acc_seg: 2.3235, aux.loss_seg: 1.1766, aux.acc_seg: 4.6079, loss: 4.1240
2021-09-24 20:24:33,899 - mmseg - INFO - Iter [3/320000]	lr: 1.000e-02, eta: 23 days, 23:35:46, time: 0.623, data_time: 0.441, memory: 16722, decode.loss_seg: 2.7135, decode.acc_seg: 37.0482, aux.loss_seg: 1.0867, aux.acc_seg: 8.9078, loss: 3.8001
2021-09-24 20:24:34,540 - mmseg - INFO - Iter [4/320000]	lr: 1.000e-02, eta: 18 days, 15:03:27, time: 0.691, data_time: 0.499, memory: 16722, decode.loss_seg: 2.6897, decode.acc_seg: 43.2168, aux.loss_seg: 1.0798, aux.acc_seg: 23.1838, loss: 3.7694
2021-09-24 20:24:35,173 - mmseg - INFO - Iter [5/320000]	lr: 1.000e-02, eta: 15 days, 8:58:34, time: 0.637, data_time: 0.450, memory: 16722, decode.loss_seg: 2.5011, decode.acc_seg: 25.8321, aux.loss_seg: 0.9958, aux.acc_seg: 26.8023, loss: 3.4969
2021-09-24 20:24:36,042 - mmseg - INFO - Iter [6/320000]	lr: 1.000e-02, eta: 13 days, 9:41:55, time: 0.960, data_time: 0.683, memory: 16722, decode.loss_seg: 2.8090, decode.acc_seg: 33.7793, aux.loss_seg: 1.1211, aux.acc_seg: 37.5626, loss: 3.9301
2021-09-24 20:24:36,671 - mmseg - INFO - Iter [7/320000]	lr: 1.000e-02, eta: 11 days, 18:34:41, time: 0.538, data_time: 0.356, memory: 16722, decode.loss_seg: 2.8451, decode.acc_seg: 26.9079, aux.loss_seg: 1.1394, aux.acc_seg: 28.8437, loss: 3.9844
2021-09-24 20:24:38,228 - mmseg - INFO - Iter [8/320000]	lr: 1.000e-02, eta: 10 days, 16:45:01, time: 0.855, data_time: 0.472, memory: 16722, decode.loss_seg: 2.7485, decode.acc_seg: 15.9624, aux.loss_seg: 1.1009, aux.acc_seg: 14.9804, loss: 3.8495
2021-09-24 20:24:39,087 - mmseg - INFO - Iter [9/320000]	lr: 1.000e-02, eta: 10 days, 3:36:03, time: 1.557, data_time: 1.344, memory: 16722, decode.loss_seg: 2.7232, decode.acc_seg: 25.0786, aux.loss_seg: 1.0816, aux.acc_seg: 25.8759, loss: 3.8048
2021-09-24 20:24:39,717 - mmseg - INFO - Iter [10/320000]	lr: 1.000e-02, eta: 9 days, 8:51:14, time: 0.632, data_time: 0.450, memory: 16722, decode.loss_seg: 2.8017, decode.acc_seg: 19.8764, aux.loss_seg: 1.1175, aux.acc_seg: 21.5575, loss: 3.9192
2021-09-24 20:24:40,341 - mmseg - INFO - Iter [11/320000]	lr: 1.000e-02, eta: 8 days, 17:27:11, time: 0.624, data_time: 0.447, memory: 16722, decode.loss_seg: 2.4776, decode.acc_seg: 30.4103, aux.loss_seg: 0.9880, aux.acc_seg: 30.1122, loss: 3.4656
2021-09-24 20:24:40,975 - mmseg - INFO - Iter [12/320000]	lr: 1.000e-02, eta: 8 days, 4:41:28, time: 0.634, data_time: 0.449, memory: 16722, decode.loss_seg: 1.9709, decode.acc_seg: 0.0041, aux.loss_seg: 0.7947, aux.acc_seg: 0.9901, loss: 2.7655
2021-09-24 20:24:41,784 - mmseg - INFO - Iter [13/320000]	lr: 1.000e-02, eta: 7 days, 17:54:38, time: 0.636, data_time: 0.449, memory: 16722, decode.loss_seg: 2.4776, decode.acc_seg: 36.6771, aux.loss_seg: 0.9894, aux.acc_seg: 36.6387, loss: 3.4669
2021-09-24 20:24:50,452 - mmseg - INFO - Iter [14/320000]	lr: 1.000e-02, eta: 9 days, 13:43:44, time: 8.993, data_time: 0.621, memory: 16722, decode.loss_seg: 2.6688, decode.acc_seg: 22.2998, aux.loss_seg: 1.0634, aux.acc_seg: 22.9579, loss: 3.7321
2021-09-24 20:24:51,481 - mmseg - INFO - Iter [15/320000]	lr: 1.000e-02, eta: 9 days, 2:10:14, time: 0.634, data_time: 0.300, memory: 16722, decode.loss_seg: 2.5739, decode.acc_seg: 33.5776, aux.loss_seg: 1.0198, aux.acc_seg: 36.2055, loss: 3.5938
2021-09-24 20:24:53,330 - mmseg - INFO - Iter [16/320000]	lr: 1.000e-02, eta: 8 days, 23:49:31, time: 2.032, data_time: 1.396, memory: 16722, decode.loss_seg: 2.4171, decode.acc_seg: 37.1288, aux.loss_seg: 0.9694, aux.acc_seg: 36.8412, loss: 3.3865
2021-09-24 20:24:54,105 - mmseg - INFO - Iter [17/320000]	lr: 1.000e-02, eta: 8 days, 15:29:09, time: 0.833, data_time: 0.631, memory: 16722, decode.loss_seg: 2.4407, decode.acc_seg: 36.3095, aux.loss_seg: 0.9699, aux.acc_seg: 37.0660, loss: 3.4105
2021-09-24 20:24:54,738 - mmseg - INFO - Iter [18/320000]	lr: 1.000e-02, eta: 8 days, 7:06:01, time: 0.636, data_time: 0.452, memory: 16722, decode.loss_seg: 2.5024, decode.acc_seg: 22.0212, aux.loss_seg: 0.9924, aux.acc_seg: 22.7550, loss: 3.4947
2021-09-24 20:24:55,630 - mmseg - INFO - Iter [19/320000]	lr: 9.999e-03, eta: 8 days, 0:47:16, time: 0.891, data_time: 0.714, memory: 16722, decode.loss_seg: 2.5916, decode.acc_seg: 10.4321, aux.loss_seg: 1.0333, aux.acc_seg: 12.7392, loss: 3.6249
2021-09-24 20:24:56,259 - mmseg - INFO - Iter [20/320000]	lr: 9.999e-03, eta: 7 days, 17:56:44, time: 0.630, data_time: 0.448, memory: 16722, decode.loss_seg: 2.2688, decode.acc_seg: 44.5843, aux.loss_seg: 0.8908, aux.acc_seg: 44.5626, loss: 3.1597
2021-09-24 20:24:56,889 - mmseg - INFO - Iter [21/320000]	lr: 9.999e-03, eta: 7 days, 11:44:42, time: 0.627, data_time: 0.448, memory: 16722, decode.loss_seg: 2.3991, decode.acc_seg: 27.1026, aux.loss_seg: 0.9679, aux.acc_seg: 30.1455, loss: 3.3670
2021-09-24 20:24:57,530 - mmseg - INFO - Iter [22/320000]	lr: 9.999e-03, eta: 7 days, 6:09:18, time: 0.639, data_time: 0.453, memory: 16722, decode.loss_seg: 2.2734, decode.acc_seg: 45.9014, aux.loss_seg: 0.9211, aux.acc_seg: 47.8537, loss: 3.1944
2021-09-24 20:24:58,170 - mmseg - INFO - Iter [23/320000]	lr: 9.999e-03, eta: 7 days, 1:04:04, time: 0.643, data_time: 0.461, memory: 16722, decode.loss_seg: 2.4194, decode.acc_seg: 18.3929, aux.loss_seg: 0.9593, aux.acc_seg: 21.4256, loss: 3.3786
2021-09-24 20:24:58,799 - mmseg - INFO - Iter [24/320000]	lr: 9.999e-03, eta: 6 days, 20:21:16, time: 0.630, data_time: 0.448, memory: 16722, decode.loss_seg: 2.3400, decode.acc_seg: 12.6139, aux.loss_seg: 0.9265, aux.acc_seg: 13.4509, loss: 3.2665
2021-09-24 20:24:59,430 - mmseg - INFO - Iter [25/320000]	lr: 9.999e-03, eta: 6 days, 16:01:47, time: 0.633, data_time: 0.448, memory: 16722, decode.loss_seg: 2.2484, decode.acc_seg: 49.5902, aux.loss_seg: 0.8678, aux.acc_seg: 58.8059, loss: 3.1163
2021-09-24 20:25:00,064 - mmseg - INFO - Iter [26/320000]	lr: 9.999e-03, eta: 6 days, 12:02:00, time: 0.632, data_time: 0.445, memory: 16722, decode.loss_seg: 2.4521, decode.acc_seg: 1.8714, aux.loss_seg: 0.9634, aux.acc_seg: 9.1390, loss: 3.4155
2021-09-24 20:25:00,696 - mmseg - INFO - Iter [27/320000]	lr: 9.999e-03, eta: 6 days, 8:19:47, time: 0.631, data_time: 0.448, memory: 16722, decode.loss_seg: 1.9747, decode.acc_seg: 11.4843, aux.loss_seg: 0.7581, aux.acc_seg: 15.6120, loss: 2.7328
2021-09-24 20:25:01,342 - mmseg - INFO - Iter [28/320000]	lr: 9.999e-03, eta: 6 days, 4:56:25, time: 0.646, data_time: 0.450, memory: 16722, decode.loss_seg: 2.3026, decode.acc_seg: 7.4636, aux.loss_seg: 0.8989, aux.acc_seg: 10.1904, loss: 3.2015
2021-09-24 20:25:02,284 - mmseg - INFO - Iter [29/320000]	lr: 9.999e-03, eta: 6 days, 1:44:00, time: 0.630, data_time: 0.449, memory: 16722, decode.loss_seg: 2.1669, decode.acc_seg: 43.3275, aux.loss_seg: 0.8065, aux.acc_seg: 46.3647, loss: 2.9734
2021-09-24 20:25:02,909 - mmseg - INFO - Iter [30/320000]	lr: 9.999e-03, eta: 5 days, 23:39:20, time: 0.939, data_time: 0.760, memory: 16722, decode.loss_seg: 2.2561, decode.acc_seg: 5.3956, aux.loss_seg: 0.8926, aux.acc_seg: 5.4097, loss: 3.1487
2021-09-24 20:25:03,543 - mmseg - INFO - Iter [31/320000]	lr: 9.999e-03, eta: 5 days, 20:50:07, time: 0.633, data_time: 0.449, memory: 16722, decode.loss_seg: 2.3490, decode.acc_seg: 10.3012, aux.loss_seg: 0.9310, aux.acc_seg: 13.4358, loss: 3.2800
2021-09-24 20:25:04,277 - mmseg - INFO - Iter [32/320000]	lr: 9.999e-03, eta: 5 days, 18:11:15, time: 0.631, data_time: 0.452, memory: 16722, decode.loss_seg: 2.1441, decode.acc_seg: 38.3437, aux.loss_seg: 0.8526, aux.acc_seg: 38.1540, loss: 2.9967
2021-09-24 20:25:05,049 - mmseg - INFO - Iter [33/320000]	lr: 9.999e-03, eta: 5 days, 16:21:27, time: 0.875, data_time: 0.596, memory: 16722, decode.loss_seg: 2.2649, decode.acc_seg: 25.2880, aux.loss_seg: 0.9105, aux.acc_seg: 21.6825, loss: 3.1754
2021-09-24 20:25:05,678 - mmseg - INFO - Iter [34/320000]	lr: 9.999e-03, eta: 5 days, 13:59:15, time: 0.628, data_time: 0.448, memory: 16722, decode.loss_seg: 1.9844, decode.acc_seg: 49.7292, aux.loss_seg: 0.7740, aux.acc_seg: 52.0347, loss: 2.7584
2021-09-24 20:25:06,348 - mmseg - INFO - Iter [35/320000]	lr: 9.999e-03, eta: 5 days, 11:52:02, time: 0.673, data_time: 0.494, memory: 16722, decode.loss_seg: 2.0687, decode.acc_seg: 29.2868, aux.loss_seg: 0.7616, aux.acc_seg: 42.0853, loss: 2.8303
2021-09-24 20:25:06,974 - mmseg - INFO - Iter [36/320000]	lr: 9.999e-03, eta: 5 days, 9:44:52, time: 0.625, data_time: 0.447, memory: 16722, decode.loss_seg: 1.9066, decode.acc_seg: 63.0866, aux.loss_seg: 0.7475, aux.acc_seg: 65.6245, loss: 2.6541
2021-09-24 20:25:08,743 - mmseg - INFO - Iter [37/320000]	lr: 9.999e-03, eta: 5 days, 10:35:18, time: 1.810, data_time: 1.588, memory: 16722, decode.loss_seg: 2.3555, decode.acc_seg: 5.1935, aux.loss_seg: 0.9143, aux.acc_seg: 11.8247, loss: 3.2698
2021-09-24 20:25:09,376 - mmseg - INFO - Iter [38/320000]	lr: 9.999e-03, eta: 5 days, 8:32:18, time: 0.593, data_time: 0.413, memory: 16722, decode.loss_seg: 1.8254, decode.acc_seg: 49.8423, aux.loss_seg: 0.6866, aux.acc_seg: 52.0319, loss: 2.5120
2021-09-24 20:25:10,001 - mmseg - INFO - Iter [39/320000]	lr: 9.999e-03, eta: 5 days, 6:44:19, time: 0.657, data_time: 0.447, memory: 16722, decode.loss_seg: 2.1393, decode.acc_seg: 18.0849, aux.loss_seg: 0.8219, aux.acc_seg: 26.5398, loss: 2.9612
2021-09-24 20:25:11,122 - mmseg - INFO - Iter [40/320000]	lr: 9.999e-03, eta: 5 days, 4:53:43, time: 0.596, data_time: 0.415, memory: 16722, decode.loss_seg: 2.0888, decode.acc_seg: 30.9026, aux.loss_seg: 0.8113, aux.acc_seg: 35.6332, loss: 2.9001
2021-09-24 20:25:13,393 - mmseg - INFO - Iter [41/320000]	lr: 9.999e-03, eta: 5 days, 7:48:34, time: 2.750, data_time: 1.313, memory: 16722, decode.loss_seg: 1.9171, decode.acc_seg: 37.3352, aux.loss_seg: 0.7048, aux.acc_seg: 37.5445, loss: 2.6218
2021-09-24 20:25:14,019 - mmseg - INFO - Iter [42/320000]	lr: 9.999e-03, eta: 5 days, 6:07:03, time: 0.639, data_time: 0.462, memory: 16722, decode.loss_seg: 1.8580, decode.acc_seg: 33.4705, aux.loss_seg: 0.6957, aux.acc_seg: 39.9345, loss: 2.5537
2021-09-24 20:25:14,653 - mmseg - INFO - Iter [43/320000]	lr: 9.999e-03, eta: 5 days, 4:29:04, time: 0.629, data_time: 0.448, memory: 16722, decode.loss_seg: 2.0084, decode.acc_seg: 41.7826, aux.loss_seg: 0.7939, aux.acc_seg: 41.1537, loss: 2.8023
2021-09-24 20:25:15,293 - mmseg - INFO - Iter [44/320000]	lr: 9.999e-03, eta: 5 days, 2:57:04, time: 0.642, data_time: 0.455, memory: 16722, decode.loss_seg: 1.9486, decode.acc_seg: 44.8885, aux.loss_seg: 0.7371, aux.acc_seg: 50.7280, loss: 2.6857
2021-09-24 20:25:15,926 - mmseg - INFO - Iter [45/320000]	lr: 9.999e-03, eta: 5 days, 1:28:13, time: 0.634, data_time: 0.451, memory: 16722, decode.loss_seg: 1.7114, decode.acc_seg: 51.6012, aux.loss_seg: 0.6631, aux.acc_seg: 51.5798, loss: 2.3745
2021-09-24 20:25:16,673 - mmseg - INFO - Iter [46/320000]	lr: 9.999e-03, eta: 5 days, 0:16:41, time: 0.750, data_time: 0.450, memory: 16722, decode.loss_seg: 2.3744, decode.acc_seg: 10.4593, aux.loss_seg: 0.8913, aux.acc_seg: 33.7385, loss: 3.2658
2021-09-24 20:25:17,305 - mmseg - INFO - Iter [47/320000]	lr: 9.999e-03, eta: 4 days, 22:54:17, time: 0.627, data_time: 0.447, memory: 16722, decode.loss_seg: 1.6620, decode.acc_seg: 45.5180, aux.loss_seg: 0.6557, aux.acc_seg: 50.2737, loss: 2.3176
2021-09-24 20:25:17,991 - mmseg - INFO - Iter [48/320000]	lr: 9.999e-03, eta: 4 days, 21:42:25, time: 0.691, data_time: 0.451, memory: 16722, decode.loss_seg: 1.7049, decode.acc_seg: 49.1426, aux.loss_seg: 0.6223, aux.acc_seg: 61.3492, loss: 2.3272
2021-09-24 20:25:18,624 - mmseg - INFO - Iter [49/320000]	lr: 9.999e-03, eta: 4 days, 20:26:58, time: 0.631, data_time: 0.448, memory: 16722, decode.loss_seg: 1.6213, decode.acc_seg: 43.2420, aux.loss_seg: 0.6672, aux.acc_seg: 42.1102, loss: 2.2885
2021-09-24 20:25:19,420 - mmseg - INFO - Iter [50/320000]	lr: 9.999e-03, eta: 4 days, 19:19:44, time: 0.680, data_time: 0.451, memory: 16722, decode.loss_seg: 1.6479, decode.acc_seg: 58.3101, aux.loss_seg: 0.6568, aux.acc_seg: 46.0485, loss: 2.3047
2021-09-24 20:37:59,475 - mmseg - INFO - Iter(val) [51]	decode.loss_seg: 3.2566, decode.acc_seg: 4.0327, aux.loss_seg: 0.9858, aux.acc_seg: 13.8939, loss: 4.2424
