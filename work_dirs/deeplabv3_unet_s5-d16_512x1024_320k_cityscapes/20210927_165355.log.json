{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-9.0-cudnn7.6.5\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.3\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+298142e", "seed": 0, "exp_name": "deeplabv3_unet_s5-d16_512x1024_320k_cityscapes.py", "mmseg_version": "0.16.0+298142e", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = 'work_dirs/deeplabv3_unet_s5-d16_512x1024_320k_cityscapes/iter_192000.pth'\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=320000)\ncheckpoint_config = dict(by_epoch=False, interval=32000)\nevaluation = dict(interval=32000, metric='mIoU', pre_eval=True)\nwork_dir = './work_dirs/deeplabv3_unet_s5-d16_512x1024_320k_cityscapes'\ngpu_ids = range(0, 1)\nseed = 0\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 192050, "lr": 0.00444, "memory": 16834, "data_time": 0.1779, "decode.loss_seg": 1.11684, "decode.acc_seg": 66.17456, "aux.loss_seg": 0.39384, "aux.acc_seg": 66.66333, "loss": 1.51069, "time": 1.67314}
{"mode": "train", "epoch": 1, "iter": 192100, "lr": 0.00444, "memory": 16834, "data_time": 0.21534, "decode.loss_seg": 1.75014, "decode.acc_seg": 44.45314, "aux.loss_seg": 0.65724, "aux.acc_seg": 45.29808, "loss": 2.40738, "time": 1.26229}
{"mode": "train", "epoch": 1, "iter": 192150, "lr": 0.00444, "memory": 16834, "data_time": 0.15405, "decode.loss_seg": 1.3911, "decode.acc_seg": 52.72143, "aux.loss_seg": 0.5578, "aux.acc_seg": 51.55598, "loss": 1.9489, "time": 1.59969}
{"mode": "train", "epoch": 1, "iter": 192200, "lr": 0.00443, "memory": 16834, "data_time": 0.29419, "decode.loss_seg": 1.47946, "decode.acc_seg": 51.6642, "aux.loss_seg": 0.58383, "aux.acc_seg": 50.60621, "loss": 2.06329, "time": 1.62368}
{"mode": "train", "epoch": 1, "iter": 192250, "lr": 0.00443, "memory": 16834, "data_time": 0.12908, "decode.loss_seg": 1.49007, "decode.acc_seg": 51.9235, "aux.loss_seg": 0.55606, "aux.acc_seg": 52.81742, "loss": 2.04612, "time": 1.28443}
{"mode": "train", "epoch": 1, "iter": 192300, "lr": 0.00443, "memory": 16834, "data_time": 0.26597, "decode.loss_seg": 1.11817, "decode.acc_seg": 62.84617, "aux.loss_seg": 0.45319, "aux.acc_seg": 61.92268, "loss": 1.57137, "time": 1.28269}
{"mode": "train", "epoch": 1, "iter": 192350, "lr": 0.00443, "memory": 16834, "data_time": 0.09738, "decode.loss_seg": 1.07229, "decode.acc_seg": 63.70047, "aux.loss_seg": 0.43329, "aux.acc_seg": 63.11136, "loss": 1.50559, "time": 1.40181}
{"mode": "train", "epoch": 1, "iter": 192400, "lr": 0.00443, "memory": 16834, "data_time": 0.30475, "decode.loss_seg": 0.88229, "decode.acc_seg": 69.47877, "aux.loss_seg": 0.33787, "aux.acc_seg": 70.52379, "loss": 1.22016, "time": 1.53728}
{"mode": "train", "epoch": 1, "iter": 192450, "lr": 0.00443, "memory": 16834, "data_time": 0.17494, "decode.loss_seg": 0.88807, "decode.acc_seg": 70.27903, "aux.loss_seg": 0.3469, "aux.acc_seg": 70.85278, "loss": 1.23497, "time": 1.34799}
{"mode": "train", "epoch": 1, "iter": 192500, "lr": 0.00442, "memory": 16834, "data_time": 0.15838, "decode.loss_seg": 0.96531, "decode.acc_seg": 67.54723, "aux.loss_seg": 0.35902, "aux.acc_seg": 68.34142, "loss": 1.32433, "time": 1.54181}
{"mode": "train", "epoch": 1, "iter": 192550, "lr": 0.00442, "memory": 16834, "data_time": 0.24058, "decode.loss_seg": 0.76617, "decode.acc_seg": 72.17691, "aux.loss_seg": 0.30682, "aux.acc_seg": 72.39317, "loss": 1.07298, "time": 1.08999}
{"mode": "train", "epoch": 1, "iter": 192600, "lr": 0.00442, "memory": 16834, "data_time": 0.12479, "decode.loss_seg": 0.75773, "decode.acc_seg": 73.79321, "aux.loss_seg": 0.29689, "aux.acc_seg": 73.81381, "loss": 1.05462, "time": 0.78417}
{"mode": "train", "epoch": 1, "iter": 192650, "lr": 0.00442, "memory": 16834, "data_time": 0.09049, "decode.loss_seg": 0.85284, "decode.acc_seg": 70.12388, "aux.loss_seg": 0.32934, "aux.acc_seg": 70.53028, "loss": 1.18218, "time": 0.86767}
{"mode": "train", "epoch": 1, "iter": 192700, "lr": 0.00442, "memory": 16834, "data_time": 0.07396, "decode.loss_seg": 0.87899, "decode.acc_seg": 68.98917, "aux.loss_seg": 0.35919, "aux.acc_seg": 68.24855, "loss": 1.23818, "time": 0.98911}
{"mode": "train", "epoch": 1, "iter": 192750, "lr": 0.00442, "memory": 16834, "data_time": 0.17838, "decode.loss_seg": 0.87135, "decode.acc_seg": 70.44064, "aux.loss_seg": 0.3376, "aux.acc_seg": 70.93858, "loss": 1.20894, "time": 1.02036}
{"mode": "train", "epoch": 1, "iter": 192800, "lr": 0.00442, "memory": 16834, "data_time": 0.05339, "decode.loss_seg": 0.76151, "decode.acc_seg": 74.7271, "aux.loss_seg": 0.30407, "aux.acc_seg": 74.28435, "loss": 1.06558, "time": 0.92455}
{"mode": "train", "epoch": 1, "iter": 192850, "lr": 0.00441, "memory": 16834, "data_time": 0.22902, "decode.loss_seg": 0.73516, "decode.acc_seg": 75.87175, "aux.loss_seg": 0.28462, "aux.acc_seg": 76.57751, "loss": 1.01978, "time": 1.02254}
{"mode": "train", "epoch": 1, "iter": 192900, "lr": 0.00441, "memory": 16834, "data_time": 0.18007, "decode.loss_seg": 0.73106, "decode.acc_seg": 75.39803, "aux.loss_seg": 0.28527, "aux.acc_seg": 75.38671, "loss": 1.01633, "time": 0.82288}
{"mode": "train", "epoch": 1, "iter": 192950, "lr": 0.00441, "memory": 16834, "data_time": 0.09263, "decode.loss_seg": 0.71798, "decode.acc_seg": 76.60337, "aux.loss_seg": 0.30251, "aux.acc_seg": 74.57447, "loss": 1.02049, "time": 0.89896}
{"mode": "train", "epoch": 1, "iter": 193000, "lr": 0.00441, "memory": 16834, "data_time": 0.18389, "decode.loss_seg": 0.62242, "decode.acc_seg": 79.30862, "aux.loss_seg": 0.23768, "aux.acc_seg": 79.32048, "loss": 0.8601, "time": 1.1491}
{"mode": "train", "epoch": 1, "iter": 193050, "lr": 0.00441, "memory": 16834, "data_time": 0.25101, "decode.loss_seg": 0.58506, "decode.acc_seg": 78.91345, "aux.loss_seg": 0.23219, "aux.acc_seg": 79.14766, "loss": 0.81724, "time": 1.0819}
{"mode": "train", "epoch": 1, "iter": 193100, "lr": 0.00441, "memory": 16834, "data_time": 0.13341, "decode.loss_seg": 0.60151, "decode.acc_seg": 77.35473, "aux.loss_seg": 0.24455, "aux.acc_seg": 77.17805, "loss": 0.84606, "time": 0.87924}
