{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-9.0-cudnn7.6.5\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.3\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+298142e", "seed": 0, "exp_name": "deeplabv3_unet_s5-d16_512x1024_320k_cityscapes.py", "mmseg_version": "0.16.0+298142e", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 500), ('val', 500)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=320000)\ncheckpoint_config = dict(by_epoch=False, interval=32000)\nevaluation = dict(interval=32000, metric='mIoU', pre_eval=True)\nwork_dir = './work_dirs/deeplabv3_unet_s5-d16_512x1024_320k_cityscapes'\ngpu_ids = range(0, 1)\nseed = 0\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.01, "memory": 16722, "data_time": 0.34156, "decode.loss_seg": 2.29314, "decode.acc_seg": 29.1246, "aux.loss_seg": 0.90321, "aux.acc_seg": 30.30765, "loss": 3.19634, "time": 1.34119}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.01, "memory": 16722, "data_time": 0.08807, "decode.loss_seg": 1.84309, "decode.acc_seg": 35.60162, "aux.loss_seg": 0.72317, "aux.acc_seg": 37.31621, "loss": 2.56625, "time": 0.84333}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.01, "memory": 16722, "data_time": 0.08329, "decode.loss_seg": 1.69646, "decode.acc_seg": 37.38517, "aux.loss_seg": 0.67017, "aux.acc_seg": 37.9113, "loss": 2.36663, "time": 1.17514}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00999, "memory": 16722, "data_time": 0.1063, "decode.loss_seg": 1.81416, "decode.acc_seg": 38.21539, "aux.loss_seg": 0.72626, "aux.acc_seg": 37.78374, "loss": 2.54042, "time": 1.10803}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00999, "memory": 16722, "data_time": 0.15719, "decode.loss_seg": 1.75366, "decode.acc_seg": 40.57566, "aux.loss_seg": 0.69714, "aux.acc_seg": 40.57904, "loss": 2.4508, "time": 1.23198}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00999, "memory": 16722, "data_time": 0.15788, "decode.loss_seg": 1.68366, "decode.acc_seg": 39.85758, "aux.loss_seg": 0.67005, "aux.acc_seg": 40.25322, "loss": 2.35371, "time": 1.24593}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00999, "memory": 16722, "data_time": 0.17316, "decode.loss_seg": 1.67671, "decode.acc_seg": 39.07591, "aux.loss_seg": 0.68275, "aux.acc_seg": 39.63021, "loss": 2.35946, "time": 1.25977}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00999, "memory": 16722, "data_time": 0.14507, "decode.loss_seg": 1.65206, "decode.acc_seg": 38.68864, "aux.loss_seg": 0.6716, "aux.acc_seg": 37.34303, "loss": 2.32367, "time": 1.19495}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00999, "memory": 16722, "data_time": 0.28091, "decode.loss_seg": 1.62215, "decode.acc_seg": 39.77303, "aux.loss_seg": 0.65766, "aux.acc_seg": 39.90624, "loss": 2.2798, "time": 1.37983}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00999, "memory": 16722, "data_time": 0.09254, "decode.loss_seg": 1.61185, "decode.acc_seg": 42.58683, "aux.loss_seg": 0.6562, "aux.acc_seg": 41.86888, "loss": 2.26805, "time": 1.01829}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00998, "memory": 16722, "data_time": 0.04742, "decode.loss_seg": 1.65641, "decode.acc_seg": 39.16904, "aux.loss_seg": 0.69164, "aux.acc_seg": 36.99973, "loss": 2.34805, "time": 1.03377}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00998, "memory": 16722, "data_time": 0.13728, "decode.loss_seg": 1.65604, "decode.acc_seg": 40.79072, "aux.loss_seg": 0.67777, "aux.acc_seg": 39.10974, "loss": 2.33381, "time": 1.33402}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00998, "memory": 16722, "data_time": 0.12306, "decode.loss_seg": 1.66333, "decode.acc_seg": 40.1108, "aux.loss_seg": 0.67542, "aux.acc_seg": 39.72271, "loss": 2.33875, "time": 1.08789}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00998, "memory": 16722, "data_time": 0.34748, "decode.loss_seg": 1.57497, "decode.acc_seg": 43.0844, "aux.loss_seg": 0.63802, "aux.acc_seg": 42.65647, "loss": 2.21299, "time": 1.28784}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00998, "memory": 16722, "data_time": 0.16682, "decode.loss_seg": 1.63653, "decode.acc_seg": 43.9836, "aux.loss_seg": 0.66134, "aux.acc_seg": 42.93915, "loss": 2.29787, "time": 1.35818}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00998, "memory": 16722, "data_time": 0.24529, "decode.loss_seg": 1.57074, "decode.acc_seg": 45.00174, "aux.loss_seg": 0.64296, "aux.acc_seg": 43.53565, "loss": 2.2137, "time": 1.18052}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00998, "memory": 16722, "data_time": 0.27496, "decode.loss_seg": 1.58531, "decode.acc_seg": 46.18174, "aux.loss_seg": 0.64488, "aux.acc_seg": 46.1848, "loss": 2.23019, "time": 1.34885}
