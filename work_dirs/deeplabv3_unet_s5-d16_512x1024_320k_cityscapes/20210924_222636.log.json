{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-9.0-cudnn7.6.5\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.3\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+298142e", "seed": 0, "exp_name": "deeplabv3_unet_s5-d16_512x1024_320k_cityscapes.py", "mmseg_version": "0.16.0+298142e", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=1, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 50), ('val', 50)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=320000)\ncheckpoint_config = dict(by_epoch=False, interval=32000)\nevaluation = dict(interval=32000, metric='mIoU', pre_eval=True)\nwork_dir = './work_dirs/deeplabv3_unet_s5-d16_512x1024_320k_cityscapes'\ngpu_ids = range(0, 1)\nseed = 0\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 1, "lr": 0.01, "memory": 16722, "data_time": 4.60737, "decode.loss_seg": 2.89847, "decode.acc_seg": 17.58404, "aux.loss_seg": 1.15764, "aux.acc_seg": 5.33276, "loss": 4.05611, "time": 18.25638}
{"mode": "train", "epoch": 1, "iter": 2, "lr": 0.01, "memory": 16722, "data_time": 0.09482, "decode.loss_seg": 2.94739, "decode.acc_seg": 2.32363, "aux.loss_seg": 1.17658, "aux.acc_seg": 4.60787, "loss": 4.12398, "time": 0.69362}
{"mode": "train", "epoch": 1, "iter": 3, "lr": 0.01, "memory": 16722, "data_time": 0.42355, "decode.loss_seg": 2.71346, "decode.acc_seg": 37.05168, "aux.loss_seg": 1.08665, "aux.acc_seg": 8.90903, "loss": 3.80011, "time": 0.60838}
{"mode": "train", "epoch": 1, "iter": 4, "lr": 0.01, "memory": 16722, "data_time": 0.43549, "decode.loss_seg": 2.68968, "decode.acc_seg": 43.21814, "aux.loss_seg": 1.07976, "aux.acc_seg": 23.18077, "loss": 3.76943, "time": 0.61956}
{"mode": "train", "epoch": 1, "iter": 5, "lr": 0.01, "memory": 16722, "data_time": 0.43771, "decode.loss_seg": 2.5011, "decode.acc_seg": 25.82817, "aux.loss_seg": 0.99578, "aux.acc_seg": 26.80292, "loss": 3.49688, "time": 0.67344}
{"mode": "train", "epoch": 1, "iter": 6, "lr": 0.01, "memory": 16722, "data_time": 0.38255, "decode.loss_seg": 2.80899, "decode.acc_seg": 33.77962, "aux.loss_seg": 1.12109, "aux.acc_seg": 37.56666, "loss": 3.93008, "time": 0.57156}
{"mode": "train", "epoch": 1, "iter": 7, "lr": 0.01, "memory": 16722, "data_time": 2.41566, "decode.loss_seg": 2.84715, "decode.acc_seg": 26.91298, "aux.loss_seg": 1.13945, "aux.acc_seg": 28.84674, "loss": 3.9866, "time": 2.68031}
{"mode": "train", "epoch": 1, "iter": 8, "lr": 0.01, "memory": 16722, "data_time": 0.53086, "decode.loss_seg": 2.74824, "decode.acc_seg": 15.96136, "aux.loss_seg": 1.10097, "aux.acc_seg": 14.91642, "loss": 3.84921, "time": 0.71604}
{"mode": "train", "epoch": 1, "iter": 9, "lr": 0.01, "memory": 16722, "data_time": 0.72725, "decode.loss_seg": 2.72288, "decode.acc_seg": 25.0782, "aux.loss_seg": 1.08302, "aux.acc_seg": 25.92592, "loss": 3.80589, "time": 0.90808}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.01, "memory": 16722, "data_time": 0.43841, "decode.loss_seg": 2.8037, "decode.acc_seg": 19.89155, "aux.loss_seg": 1.11688, "aux.acc_seg": 21.47512, "loss": 3.92058, "time": 0.62213}
{"mode": "train", "epoch": 1, "iter": 11, "lr": 0.01, "memory": 16722, "data_time": 0.43259, "decode.loss_seg": 2.47747, "decode.acc_seg": 30.42097, "aux.loss_seg": 0.9871, "aux.acc_seg": 30.34077, "loss": 3.46457, "time": 0.61522}
{"mode": "train", "epoch": 1, "iter": 12, "lr": 0.01, "memory": 16722, "data_time": 0.43842, "decode.loss_seg": 1.97895, "decode.acc_seg": 0.00629, "aux.loss_seg": 0.7948, "aux.acc_seg": 1.37291, "loss": 2.77375, "time": 0.625}
{"mode": "train", "epoch": 1, "iter": 13, "lr": 0.01, "memory": 16722, "data_time": 0.56056, "decode.loss_seg": 2.47783, "decode.acc_seg": 36.66744, "aux.loss_seg": 0.99154, "aux.acc_seg": 36.83777, "loss": 3.46936, "time": 6.9774}
{"mode": "train", "epoch": 1, "iter": 14, "lr": 0.01, "memory": 16722, "data_time": 0.26558, "decode.loss_seg": 2.66857, "decode.acc_seg": 22.30062, "aux.loss_seg": 1.06366, "aux.acc_seg": 23.31209, "loss": 3.73223, "time": 1.1979}
{"mode": "train", "epoch": 1, "iter": 15, "lr": 0.01, "memory": 16722, "data_time": 0.68806, "decode.loss_seg": 2.57494, "decode.acc_seg": 33.49171, "aux.loss_seg": 1.01971, "aux.acc_seg": 36.39107, "loss": 3.59466, "time": 0.87742}
{"mode": "train", "epoch": 1, "iter": 16, "lr": 0.01, "memory": 16722, "data_time": 0.46349, "decode.loss_seg": 2.41957, "decode.acc_seg": 37.0944, "aux.loss_seg": 0.97359, "aux.acc_seg": 36.81574, "loss": 3.39316, "time": 0.6466}
{"mode": "train", "epoch": 1, "iter": 17, "lr": 0.01, "memory": 16722, "data_time": 0.44023, "decode.loss_seg": 2.43806, "decode.acc_seg": 36.28473, "aux.loss_seg": 0.97546, "aux.acc_seg": 36.8021, "loss": 3.41352, "time": 0.6213}
{"mode": "train", "epoch": 1, "iter": 18, "lr": 0.01, "memory": 16722, "data_time": 0.43766, "decode.loss_seg": 2.49509, "decode.acc_seg": 21.9018, "aux.loss_seg": 0.99899, "aux.acc_seg": 22.651, "loss": 3.49408, "time": 0.71174}
{"mode": "train", "epoch": 1, "iter": 19, "lr": 0.01, "memory": 16722, "data_time": 0.43547, "decode.loss_seg": 2.59444, "decode.acc_seg": 10.41059, "aux.loss_seg": 1.03485, "aux.acc_seg": 13.54599, "loss": 3.6293, "time": 0.61659}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.01, "memory": 16722, "data_time": 0.43835, "decode.loss_seg": 2.26572, "decode.acc_seg": 44.5364, "aux.loss_seg": 0.89777, "aux.acc_seg": 44.67716, "loss": 3.16349, "time": 0.62059}
{"mode": "train", "epoch": 1, "iter": 21, "lr": 0.01, "memory": 16722, "data_time": 0.44065, "decode.loss_seg": 2.40264, "decode.acc_seg": 27.03571, "aux.loss_seg": 0.97681, "aux.acc_seg": 30.88455, "loss": 3.37944, "time": 0.62425}
{"mode": "train", "epoch": 1, "iter": 22, "lr": 0.01, "memory": 16722, "data_time": 0.43563, "decode.loss_seg": 2.28529, "decode.acc_seg": 45.91303, "aux.loss_seg": 0.93296, "aux.acc_seg": 47.82419, "loss": 3.21825, "time": 0.62011}
{"mode": "train", "epoch": 1, "iter": 23, "lr": 0.01, "memory": 16722, "data_time": 0.43425, "decode.loss_seg": 2.42376, "decode.acc_seg": 18.33181, "aux.loss_seg": 0.96851, "aux.acc_seg": 21.32454, "loss": 3.39227, "time": 0.62225}
{"mode": "train", "epoch": 1, "iter": 24, "lr": 0.01, "memory": 16722, "data_time": 0.4747, "decode.loss_seg": 2.34185, "decode.acc_seg": 12.51011, "aux.loss_seg": 0.9274, "aux.acc_seg": 12.90503, "loss": 3.26925, "time": 0.6608}
{"mode": "train", "epoch": 1, "iter": 25, "lr": 0.01, "memory": 16722, "data_time": 0.49768, "decode.loss_seg": 2.24409, "decode.acc_seg": 49.28856, "aux.loss_seg": 0.87736, "aux.acc_seg": 57.68423, "loss": 3.12146, "time": 0.68911}
{"mode": "train", "epoch": 1, "iter": 26, "lr": 0.01, "memory": 16722, "data_time": 0.43641, "decode.loss_seg": 2.46335, "decode.acc_seg": 0.87719, "aux.loss_seg": 0.96853, "aux.acc_seg": 12.34236, "loss": 3.43188, "time": 0.61962}
{"mode": "train", "epoch": 1, "iter": 27, "lr": 0.01, "memory": 16722, "data_time": 0.43792, "decode.loss_seg": 1.97139, "decode.acc_seg": 11.67107, "aux.loss_seg": 0.7665, "aux.acc_seg": 15.95917, "loss": 2.73789, "time": 0.62345}
{"mode": "train", "epoch": 1, "iter": 28, "lr": 0.01, "memory": 16722, "data_time": 0.62834, "decode.loss_seg": 2.29997, "decode.acc_seg": 7.16467, "aux.loss_seg": 0.89956, "aux.acc_seg": 8.90751, "loss": 3.19953, "time": 4.36847}
{"mode": "train", "epoch": 1, "iter": 29, "lr": 0.01, "memory": 16722, "data_time": 1.09641, "decode.loss_seg": 2.17103, "decode.acc_seg": 42.24453, "aux.loss_seg": 0.8134, "aux.acc_seg": 45.26548, "loss": 2.98443, "time": 1.27676}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.01, "memory": 16722, "data_time": 0.57039, "decode.loss_seg": 2.23978, "decode.acc_seg": 5.41477, "aux.loss_seg": 0.88897, "aux.acc_seg": 5.54714, "loss": 3.12875, "time": 0.8334}
{"mode": "train", "epoch": 1, "iter": 31, "lr": 0.01, "memory": 16722, "data_time": 0.35394, "decode.loss_seg": 2.35294, "decode.acc_seg": 11.00416, "aux.loss_seg": 0.91982, "aux.acc_seg": 13.80987, "loss": 3.27276, "time": 0.53485}
{"mode": "train", "epoch": 1, "iter": 32, "lr": 0.01, "memory": 16722, "data_time": 0.43663, "decode.loss_seg": 2.14334, "decode.acc_seg": 38.69162, "aux.loss_seg": 0.8533, "aux.acc_seg": 37.58287, "loss": 2.99663, "time": 0.68175}
{"mode": "train", "epoch": 1, "iter": 33, "lr": 0.01, "memory": 16722, "data_time": 0.3885, "decode.loss_seg": 2.26453, "decode.acc_seg": 32.53927, "aux.loss_seg": 0.91845, "aux.acc_seg": 18.20126, "loss": 3.18298, "time": 0.57028}
{"mode": "train", "epoch": 1, "iter": 34, "lr": 0.01, "memory": 16722, "data_time": 0.43663, "decode.loss_seg": 1.97211, "decode.acc_seg": 48.30055, "aux.loss_seg": 0.77309, "aux.acc_seg": 51.15719, "loss": 2.7452, "time": 0.61619}
{"mode": "train", "epoch": 1, "iter": 35, "lr": 0.01, "memory": 16722, "data_time": 0.43672, "decode.loss_seg": 2.08418, "decode.acc_seg": 26.68905, "aux.loss_seg": 0.77017, "aux.acc_seg": 41.08019, "loss": 2.85435, "time": 0.61734}
{"mode": "train", "epoch": 1, "iter": 36, "lr": 0.01, "memory": 16722, "data_time": 0.43705, "decode.loss_seg": 1.89954, "decode.acc_seg": 60.54029, "aux.loss_seg": 0.74786, "aux.acc_seg": 64.61897, "loss": 2.64739, "time": 0.61893}
{"mode": "train", "epoch": 1, "iter": 37, "lr": 0.01, "memory": 16722, "data_time": 0.43886, "decode.loss_seg": 2.38823, "decode.acc_seg": 3.85628, "aux.loss_seg": 0.90692, "aux.acc_seg": 9.88064, "loss": 3.29515, "time": 0.61883}
{"mode": "train", "epoch": 1, "iter": 38, "lr": 0.01, "memory": 16722, "data_time": 0.46941, "decode.loss_seg": 1.82533, "decode.acc_seg": 47.01834, "aux.loss_seg": 0.68659, "aux.acc_seg": 54.72183, "loss": 2.51192, "time": 0.64955}
{"mode": "train", "epoch": 1, "iter": 39, "lr": 0.01, "memory": 16722, "data_time": 0.43445, "decode.loss_seg": 2.11594, "decode.acc_seg": 18.45703, "aux.loss_seg": 0.81633, "aux.acc_seg": 23.14396, "loss": 2.93227, "time": 0.63922}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.01, "memory": 16722, "data_time": 0.4371, "decode.loss_seg": 2.09262, "decode.acc_seg": 33.77552, "aux.loss_seg": 0.79383, "aux.acc_seg": 36.21168, "loss": 2.88645, "time": 0.62091}
{"mode": "train", "epoch": 1, "iter": 41, "lr": 0.01, "memory": 16722, "data_time": 0.43977, "decode.loss_seg": 1.8671, "decode.acc_seg": 37.20741, "aux.loss_seg": 0.70215, "aux.acc_seg": 37.16412, "loss": 2.56925, "time": 0.62048}
{"mode": "train", "epoch": 1, "iter": 42, "lr": 0.01, "memory": 16722, "data_time": 0.43771, "decode.loss_seg": 1.82834, "decode.acc_seg": 35.19993, "aux.loss_seg": 0.70224, "aux.acc_seg": 40.483, "loss": 2.53058, "time": 0.61638}
{"mode": "train", "epoch": 1, "iter": 43, "lr": 0.01, "memory": 16722, "data_time": 0.43631, "decode.loss_seg": 1.98494, "decode.acc_seg": 42.33398, "aux.loss_seg": 0.77881, "aux.acc_seg": 41.22553, "loss": 2.76376, "time": 0.70328}
{"mode": "train", "epoch": 1, "iter": 44, "lr": 0.01, "memory": 16722, "data_time": 0.47663, "decode.loss_seg": 1.90425, "decode.acc_seg": 45.10241, "aux.loss_seg": 0.71637, "aux.acc_seg": 49.94993, "loss": 2.62063, "time": 0.65314}
{"mode": "train", "epoch": 1, "iter": 45, "lr": 0.01, "memory": 16722, "data_time": 0.43567, "decode.loss_seg": 1.67219, "decode.acc_seg": 54.69484, "aux.loss_seg": 0.65902, "aux.acc_seg": 52.90871, "loss": 2.3312, "time": 0.61722}
{"mode": "train", "epoch": 1, "iter": 46, "lr": 0.01, "memory": 16722, "data_time": 0.44761, "decode.loss_seg": 2.32013, "decode.acc_seg": 17.41571, "aux.loss_seg": 0.89804, "aux.acc_seg": 37.14199, "loss": 3.21817, "time": 0.76712}
{"mode": "train", "epoch": 1, "iter": 47, "lr": 0.01, "memory": 16722, "data_time": 0.43853, "decode.loss_seg": 1.58204, "decode.acc_seg": 49.85704, "aux.loss_seg": 0.63057, "aux.acc_seg": 48.85635, "loss": 2.21261, "time": 0.61856}
{"mode": "train", "epoch": 1, "iter": 48, "lr": 0.01, "memory": 16722, "data_time": 0.43782, "decode.loss_seg": 1.5897, "decode.acc_seg": 56.88524, "aux.loss_seg": 0.60905, "aux.acc_seg": 60.93779, "loss": 2.19875, "time": 0.61861}
{"mode": "train", "epoch": 1, "iter": 49, "lr": 0.01, "memory": 16722, "data_time": 0.5099, "decode.loss_seg": 1.59394, "decode.acc_seg": 43.41488, "aux.loss_seg": 0.62832, "aux.acc_seg": 43.18237, "loss": 2.22226, "time": 0.69052}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.01, "memory": 16722, "data_time": 0.43888, "decode.loss_seg": 1.65016, "decode.acc_seg": 48.57597, "aux.loss_seg": 0.66739, "aux.acc_seg": 41.44516, "loss": 2.31755, "time": 0.62019}
