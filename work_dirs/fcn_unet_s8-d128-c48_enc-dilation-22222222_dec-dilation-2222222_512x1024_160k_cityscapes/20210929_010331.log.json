{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-9.0-cudnn7.6.5\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.3\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+298142e", "seed": 0, "exp_name": "fcn_unet_s8-d128-c48_enc-dilation-22222222_dec-dilation-2222222_512x1024_160k_cityscapes.py", "mmseg_version": "0.16.0+298142e", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=48,\n        num_stages=8,\n        strides=(1, 1, 1, 1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2, 2, 2, 2),\n        downsamples=(True, True, True, True, True, True, True),\n        enc_dilations=(2, 2, 2, 2, 2, 2, 2, 2),\n        dec_dilations=(2, 2, 2, 2, 2, 2, 2),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=48,\n        in_index=7,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=96,\n        in_index=6,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=16000)\nevaluation = dict(interval=16000, metric='mIoU', pre_eval=True)\nwork_dir = './work_dirs/fcn_unet_s8-d128-c48_enc-dilation-22222222_dec-dilation-2222222_512x1024_160k_cityscapes'\ngpu_ids = range(0, 1)\nseed = 0\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.01, "memory": 23888, "data_time": 0.06778, "decode.loss_seg": 2.04738, "decode.acc_seg": 32.99127, "aux.loss_seg": 0.8971, "aux.acc_seg": 32.52404, "loss": 2.94448, "time": 0.92228}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00999, "memory": 23888, "data_time": 0.08641, "decode.loss_seg": 1.66995, "decode.acc_seg": 41.65532, "aux.loss_seg": 0.69759, "aux.acc_seg": 41.91481, "loss": 2.36754, "time": 0.80031}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00999, "memory": 23888, "data_time": 0.08111, "decode.loss_seg": 1.55056, "decode.acc_seg": 44.20253, "aux.loss_seg": 0.62366, "aux.acc_seg": 45.31223, "loss": 2.17422, "time": 0.88968}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00999, "memory": 23888, "data_time": 0.02263, "decode.loss_seg": 1.63562, "decode.acc_seg": 45.01528, "aux.loss_seg": 0.64714, "aux.acc_seg": 45.25942, "loss": 2.28276, "time": 0.7347}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00999, "memory": 23888, "data_time": 0.15202, "decode.loss_seg": 1.58657, "decode.acc_seg": 47.52511, "aux.loss_seg": 0.62028, "aux.acc_seg": 49.65162, "loss": 2.20685, "time": 0.77064}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00998, "memory": 23888, "data_time": 0.11936, "decode.loss_seg": 1.45622, "decode.acc_seg": 51.10863, "aux.loss_seg": 0.57295, "aux.acc_seg": 52.36234, "loss": 2.02917, "time": 0.97544}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00998, "memory": 23888, "data_time": 0.11049, "decode.loss_seg": 1.49244, "decode.acc_seg": 49.11141, "aux.loss_seg": 0.59, "aux.acc_seg": 50.48808, "loss": 2.08245, "time": 0.79928}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00998, "memory": 23888, "data_time": 0.01394, "decode.loss_seg": 1.37859, "decode.acc_seg": 53.03476, "aux.loss_seg": 0.54615, "aux.acc_seg": 53.60737, "loss": 1.92474, "time": 0.66484}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00997, "memory": 23888, "data_time": 0.08856, "decode.loss_seg": 1.37403, "decode.acc_seg": 52.75426, "aux.loss_seg": 0.54029, "aux.acc_seg": 53.48849, "loss": 1.91432, "time": 0.81468}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00997, "memory": 23888, "data_time": 0.08878, "decode.loss_seg": 1.39497, "decode.acc_seg": 52.80086, "aux.loss_seg": 0.5536, "aux.acc_seg": 53.38855, "loss": 1.94857, "time": 0.86102}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00997, "memory": 23888, "data_time": 0.25765, "decode.loss_seg": 1.32116, "decode.acc_seg": 55.0499, "aux.loss_seg": 0.51772, "aux.acc_seg": 56.02336, "loss": 1.83888, "time": 1.13359}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00997, "memory": 23888, "data_time": 0.2234, "decode.loss_seg": 1.33412, "decode.acc_seg": 53.92866, "aux.loss_seg": 0.53185, "aux.acc_seg": 53.99661, "loss": 1.86597, "time": 0.94646}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00996, "memory": 23888, "data_time": 0.04788, "decode.loss_seg": 1.35059, "decode.acc_seg": 52.3495, "aux.loss_seg": 0.53927, "aux.acc_seg": 52.46557, "loss": 1.88986, "time": 0.85143}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00996, "memory": 23888, "data_time": 0.31561, "decode.loss_seg": 1.28888, "decode.acc_seg": 55.20075, "aux.loss_seg": 0.51284, "aux.acc_seg": 55.28365, "loss": 1.80172, "time": 1.08527}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00996, "memory": 23888, "data_time": 0.26701, "decode.loss_seg": 1.35758, "decode.acc_seg": 53.54372, "aux.loss_seg": 0.5415, "aux.acc_seg": 54.67445, "loss": 1.89909, "time": 1.19446}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00996, "memory": 23888, "data_time": 0.11568, "decode.loss_seg": 1.37072, "decode.acc_seg": 53.08463, "aux.loss_seg": 0.54204, "aux.acc_seg": 54.18117, "loss": 1.91275, "time": 0.99187}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00995, "memory": 23888, "data_time": 0.05075, "decode.loss_seg": 1.35221, "decode.acc_seg": 55.06554, "aux.loss_seg": 0.53243, "aux.acc_seg": 56.03544, "loss": 1.88463, "time": 1.00367}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00995, "memory": 23888, "data_time": 0.05207, "decode.loss_seg": 1.34088, "decode.acc_seg": 55.8082, "aux.loss_seg": 0.52638, "aux.acc_seg": 56.73641, "loss": 1.86726, "time": 0.8344}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00995, "memory": 23888, "data_time": 0.09179, "decode.loss_seg": 1.29482, "decode.acc_seg": 56.9231, "aux.loss_seg": 0.50893, "aux.acc_seg": 57.50826, "loss": 1.80375, "time": 0.94132}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00994, "memory": 23888, "data_time": 0.11093, "decode.loss_seg": 1.2191, "decode.acc_seg": 58.81149, "aux.loss_seg": 0.48079, "aux.acc_seg": 59.69553, "loss": 1.6999, "time": 0.85803}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00994, "memory": 23888, "data_time": 0.16815, "decode.loss_seg": 1.17856, "decode.acc_seg": 57.0808, "aux.loss_seg": 0.47039, "aux.acc_seg": 58.59062, "loss": 1.64895, "time": 0.9024}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00994, "memory": 23888, "data_time": 0.03154, "decode.loss_seg": 1.09194, "decode.acc_seg": 61.0802, "aux.loss_seg": 0.43445, "aux.acc_seg": 61.75168, "loss": 1.52639, "time": 0.70093}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00994, "memory": 23888, "data_time": 0.12138, "decode.loss_seg": 1.18298, "decode.acc_seg": 57.49767, "aux.loss_seg": 0.46984, "aux.acc_seg": 58.03913, "loss": 1.65282, "time": 0.975}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00993, "memory": 23888, "data_time": 0.01822, "decode.loss_seg": 1.16472, "decode.acc_seg": 55.77392, "aux.loss_seg": 0.46055, "aux.acc_seg": 57.44507, "loss": 1.62528, "time": 0.7088}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00993, "memory": 23888, "data_time": 0.16102, "decode.loss_seg": 1.15888, "decode.acc_seg": 58.74948, "aux.loss_seg": 0.45952, "aux.acc_seg": 59.83219, "loss": 1.61841, "time": 1.05108}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00993, "memory": 23888, "data_time": 0.14586, "decode.loss_seg": 1.15691, "decode.acc_seg": 58.52916, "aux.loss_seg": 0.45891, "aux.acc_seg": 58.6168, "loss": 1.61582, "time": 0.95195}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00992, "memory": 23888, "data_time": 0.25161, "decode.loss_seg": 1.10552, "decode.acc_seg": 60.00318, "aux.loss_seg": 0.4384, "aux.acc_seg": 60.93559, "loss": 1.54392, "time": 1.11716}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00992, "memory": 23888, "data_time": 0.07058, "decode.loss_seg": 1.33677, "decode.acc_seg": 52.92154, "aux.loss_seg": 0.5242, "aux.acc_seg": 54.20894, "loss": 1.86097, "time": 0.90367}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.00992, "memory": 23888, "data_time": 0.45525, "decode.loss_seg": 1.21075, "decode.acc_seg": 58.34642, "aux.loss_seg": 0.48008, "aux.acc_seg": 58.73246, "loss": 1.69083, "time": 1.33743}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00992, "memory": 23888, "data_time": 0.05829, "decode.loss_seg": 1.09713, "decode.acc_seg": 60.73066, "aux.loss_seg": 0.43173, "aux.acc_seg": 61.2312, "loss": 1.52886, "time": 0.72232}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00991, "memory": 23888, "data_time": 0.20272, "decode.loss_seg": 1.09293, "decode.acc_seg": 59.18704, "aux.loss_seg": 0.43213, "aux.acc_seg": 59.67811, "loss": 1.52506, "time": 0.98428}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00991, "memory": 23888, "data_time": 0.13777, "decode.loss_seg": 1.17878, "decode.acc_seg": 58.68535, "aux.loss_seg": 0.47208, "aux.acc_seg": 58.97085, "loss": 1.65086, "time": 0.91349}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00991, "memory": 23888, "data_time": 0.02984, "decode.loss_seg": 1.12442, "decode.acc_seg": 61.99069, "aux.loss_seg": 0.45652, "aux.acc_seg": 62.55141, "loss": 1.58094, "time": 0.70748}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00991, "memory": 23888, "data_time": 0.19931, "decode.loss_seg": 1.07064, "decode.acc_seg": 60.623, "aux.loss_seg": 0.41892, "aux.acc_seg": 61.68208, "loss": 1.48957, "time": 0.87776}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.0099, "memory": 23888, "data_time": 0.16682, "decode.loss_seg": 1.06965, "decode.acc_seg": 59.80387, "aux.loss_seg": 0.42082, "aux.acc_seg": 60.36062, "loss": 1.49047, "time": 0.94006}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.0099, "memory": 23888, "data_time": 0.02278, "decode.loss_seg": 1.16379, "decode.acc_seg": 59.87738, "aux.loss_seg": 0.45678, "aux.acc_seg": 60.76821, "loss": 1.62058, "time": 0.82694}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.0099, "memory": 23888, "data_time": 0.13349, "decode.loss_seg": 1.11119, "decode.acc_seg": 61.73711, "aux.loss_seg": 0.44552, "aux.acc_seg": 62.32021, "loss": 1.5567, "time": 0.96915}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00989, "memory": 23888, "data_time": 0.09401, "decode.loss_seg": 1.08839, "decode.acc_seg": 60.02587, "aux.loss_seg": 0.42831, "aux.acc_seg": 60.65572, "loss": 1.51669, "time": 0.95091}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00989, "memory": 23888, "data_time": 0.02503, "decode.loss_seg": 1.11786, "decode.acc_seg": 62.69538, "aux.loss_seg": 0.43792, "aux.acc_seg": 63.3026, "loss": 1.55579, "time": 0.88143}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00989, "memory": 23888, "data_time": 0.15696, "decode.loss_seg": 1.06336, "decode.acc_seg": 62.78163, "aux.loss_seg": 0.42565, "aux.acc_seg": 63.33213, "loss": 1.48902, "time": 1.0541}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.00989, "memory": 23888, "data_time": 0.14098, "decode.loss_seg": 1.14063, "decode.acc_seg": 60.03802, "aux.loss_seg": 0.45746, "aux.acc_seg": 60.80654, "loss": 1.5981, "time": 0.91284}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.00988, "memory": 23888, "data_time": 0.06318, "decode.loss_seg": 1.10876, "decode.acc_seg": 59.39397, "aux.loss_seg": 0.43169, "aux.acc_seg": 60.27676, "loss": 1.54046, "time": 0.76161}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 0.00988, "memory": 23888, "data_time": 0.10544, "decode.loss_seg": 1.15747, "decode.acc_seg": 59.66195, "aux.loss_seg": 0.46383, "aux.acc_seg": 59.628, "loss": 1.6213, "time": 0.86061}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 0.00988, "memory": 23888, "data_time": 0.28609, "decode.loss_seg": 1.18994, "decode.acc_seg": 59.38803, "aux.loss_seg": 0.46933, "aux.acc_seg": 59.25088, "loss": 1.65927, "time": 1.16313}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 0.00987, "memory": 23888, "data_time": 0.16438, "decode.loss_seg": 1.17649, "decode.acc_seg": 57.85943, "aux.loss_seg": 0.45795, "aux.acc_seg": 59.62325, "loss": 1.63443, "time": 0.87022}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 0.00987, "memory": 23888, "data_time": 0.13349, "decode.loss_seg": 1.01288, "decode.acc_seg": 62.93352, "aux.loss_seg": 0.40102, "aux.acc_seg": 63.22784, "loss": 1.4139, "time": 0.98537}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 0.00987, "memory": 23888, "data_time": 0.01462, "decode.loss_seg": 1.06417, "decode.acc_seg": 61.88234, "aux.loss_seg": 0.41643, "aux.acc_seg": 62.29081, "loss": 1.48061, "time": 0.6352}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 0.00987, "memory": 23888, "data_time": 0.16259, "decode.loss_seg": 1.04465, "decode.acc_seg": 62.45035, "aux.loss_seg": 0.4128, "aux.acc_seg": 63.23714, "loss": 1.45745, "time": 1.01869}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 0.00986, "memory": 23888, "data_time": 0.0269, "decode.loss_seg": 1.0431, "decode.acc_seg": 62.71693, "aux.loss_seg": 0.41, "aux.acc_seg": 63.20754, "loss": 1.4531, "time": 0.74492}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 0.00986, "memory": 23888, "data_time": 0.11619, "decode.loss_seg": 1.12823, "decode.acc_seg": 58.73693, "aux.loss_seg": 0.45066, "aux.acc_seg": 59.20484, "loss": 1.5789, "time": 0.99593}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 0.00986, "memory": 23888, "data_time": 0.10937, "decode.loss_seg": 1.01405, "decode.acc_seg": 62.94354, "aux.loss_seg": 0.40142, "aux.acc_seg": 63.40594, "loss": 1.41547, "time": 0.94022}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 0.00986, "memory": 23888, "data_time": 0.20114, "decode.loss_seg": 1.07143, "decode.acc_seg": 60.91153, "aux.loss_seg": 0.42192, "aux.acc_seg": 61.41775, "loss": 1.49336, "time": 1.09817}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 0.00985, "memory": 23888, "data_time": 0.07962, "decode.loss_seg": 1.04145, "decode.acc_seg": 62.14025, "aux.loss_seg": 0.41297, "aux.acc_seg": 62.68808, "loss": 1.45442, "time": 0.99105}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 0.00985, "memory": 23888, "data_time": 0.10086, "decode.loss_seg": 1.11169, "decode.acc_seg": 61.60816, "aux.loss_seg": 0.43135, "aux.acc_seg": 63.0407, "loss": 1.54304, "time": 0.83926}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 0.00985, "memory": 23888, "data_time": 0.43833, "decode.loss_seg": 1.05483, "decode.acc_seg": 61.11078, "aux.loss_seg": 0.40862, "aux.acc_seg": 61.93912, "loss": 1.46344, "time": 1.45564}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 0.00984, "memory": 23888, "data_time": 0.01421, "decode.loss_seg": 0.96465, "decode.acc_seg": 64.94547, "aux.loss_seg": 0.38371, "aux.acc_seg": 65.1751, "loss": 1.34836, "time": 0.81949}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 0.00984, "memory": 23888, "data_time": 0.20129, "decode.loss_seg": 0.99213, "decode.acc_seg": 63.42296, "aux.loss_seg": 0.39365, "aux.acc_seg": 64.16603, "loss": 1.38579, "time": 1.01279}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 0.00984, "memory": 23888, "data_time": 0.0155, "decode.loss_seg": 1.03903, "decode.acc_seg": 62.88133, "aux.loss_seg": 0.40824, "aux.acc_seg": 63.81415, "loss": 1.44727, "time": 0.78811}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 0.00984, "memory": 23888, "data_time": 0.18496, "decode.loss_seg": 0.99793, "decode.acc_seg": 63.77803, "aux.loss_seg": 0.39475, "aux.acc_seg": 64.53521, "loss": 1.39268, "time": 0.95286}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 0.00983, "memory": 23888, "data_time": 0.29826, "decode.loss_seg": 1.10179, "decode.acc_seg": 63.18127, "aux.loss_seg": 0.43845, "aux.acc_seg": 63.53147, "loss": 1.54023, "time": 1.03535}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 0.00983, "memory": 23888, "data_time": 0.01828, "decode.loss_seg": 1.02762, "decode.acc_seg": 63.53136, "aux.loss_seg": 0.40564, "aux.acc_seg": 64.08692, "loss": 1.43326, "time": 0.86363}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 0.00983, "memory": 23888, "data_time": 0.02051, "decode.loss_seg": 1.08219, "decode.acc_seg": 63.27037, "aux.loss_seg": 0.42999, "aux.acc_seg": 63.82711, "loss": 1.51219, "time": 0.7761}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 0.00982, "memory": 23888, "data_time": 0.20794, "decode.loss_seg": 0.89935, "decode.acc_seg": 67.21962, "aux.loss_seg": 0.35493, "aux.acc_seg": 67.96945, "loss": 1.25428, "time": 1.08574}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 0.00982, "memory": 23888, "data_time": 0.01866, "decode.loss_seg": 0.97265, "decode.acc_seg": 65.32559, "aux.loss_seg": 0.3844, "aux.acc_seg": 65.83157, "loss": 1.35705, "time": 0.74709}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 0.00982, "memory": 23888, "data_time": 0.19136, "decode.loss_seg": 0.8794, "decode.acc_seg": 68.84727, "aux.loss_seg": 0.34889, "aux.acc_seg": 68.78345, "loss": 1.2283, "time": 0.95612}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 0.00982, "memory": 23888, "data_time": 0.0882, "decode.loss_seg": 0.97836, "decode.acc_seg": 67.07939, "aux.loss_seg": 0.3839, "aux.acc_seg": 67.67626, "loss": 1.36226, "time": 0.93408}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 0.00981, "memory": 23888, "data_time": 0.32539, "decode.loss_seg": 0.94089, "decode.acc_seg": 66.50247, "aux.loss_seg": 0.37109, "aux.acc_seg": 67.01755, "loss": 1.31198, "time": 1.114}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 0.00981, "memory": 23888, "data_time": 0.12358, "decode.loss_seg": 0.99237, "decode.acc_seg": 65.02243, "aux.loss_seg": 0.39445, "aux.acc_seg": 65.16236, "loss": 1.38682, "time": 0.90577}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 0.00981, "memory": 23888, "data_time": 0.13692, "decode.loss_seg": 0.95569, "decode.acc_seg": 64.94414, "aux.loss_seg": 0.3728, "aux.acc_seg": 65.75651, "loss": 1.32849, "time": 1.00401}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 0.0098, "memory": 23888, "data_time": 0.01446, "decode.loss_seg": 1.25219, "decode.acc_seg": 56.53305, "aux.loss_seg": 0.50128, "aux.acc_seg": 56.68044, "loss": 1.75346, "time": 0.83585}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 0.0098, "memory": 23888, "data_time": 0.32463, "decode.loss_seg": 1.10746, "decode.acc_seg": 60.41281, "aux.loss_seg": 0.44258, "aux.acc_seg": 60.51493, "loss": 1.55004, "time": 1.15977}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 0.0098, "memory": 23888, "data_time": 0.07867, "decode.loss_seg": 0.94109, "decode.acc_seg": 65.57272, "aux.loss_seg": 0.37109, "aux.acc_seg": 65.93477, "loss": 1.31218, "time": 0.86893}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 0.0098, "memory": 23888, "data_time": 0.15436, "decode.loss_seg": 0.9926, "decode.acc_seg": 65.48496, "aux.loss_seg": 0.3922, "aux.acc_seg": 66.05906, "loss": 1.3848, "time": 0.88294}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 0.00979, "memory": 23888, "data_time": 0.2292, "decode.loss_seg": 1.03285, "decode.acc_seg": 62.705, "aux.loss_seg": 0.40051, "aux.acc_seg": 63.66848, "loss": 1.43336, "time": 1.09664}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 0.00979, "memory": 23888, "data_time": 0.18326, "decode.loss_seg": 1.05039, "decode.acc_seg": 61.99889, "aux.loss_seg": 0.40981, "aux.acc_seg": 63.25667, "loss": 1.4602, "time": 1.03932}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 0.00979, "memory": 23888, "data_time": 0.02119, "decode.loss_seg": 1.02829, "decode.acc_seg": 61.84928, "aux.loss_seg": 0.40648, "aux.acc_seg": 62.16623, "loss": 1.43477, "time": 0.80036}
{"mode": "train", "epoch": 3, "iter": 3850, "lr": 0.00979, "memory": 23888, "data_time": 0.23398, "decode.loss_seg": 0.95171, "decode.acc_seg": 68.47551, "aux.loss_seg": 0.37132, "aux.acc_seg": 68.7891, "loss": 1.32303, "time": 1.04522}
{"mode": "train", "epoch": 3, "iter": 3900, "lr": 0.00978, "memory": 23888, "data_time": 0.10899, "decode.loss_seg": 0.85832, "decode.acc_seg": 67.71373, "aux.loss_seg": 0.33287, "aux.acc_seg": 68.27067, "loss": 1.19119, "time": 0.97198}
{"mode": "train", "epoch": 3, "iter": 3950, "lr": 0.00978, "memory": 23888, "data_time": 0.26324, "decode.loss_seg": 0.98184, "decode.acc_seg": 63.77762, "aux.loss_seg": 0.38792, "aux.acc_seg": 64.24909, "loss": 1.36976, "time": 1.11463}
{"mode": "train", "epoch": 3, "iter": 4000, "lr": 0.00978, "memory": 23888, "data_time": 0.23628, "decode.loss_seg": 0.94893, "decode.acc_seg": 64.9529, "aux.loss_seg": 0.3741, "aux.acc_seg": 65.76271, "loss": 1.32303, "time": 1.02321}
